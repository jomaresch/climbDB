// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("TTComments", testTTComments)
	t.Run("TTRegions", testTTRegions)
	t.Run("TTRoutes", testTTRoutes)
	t.Run("TTSummits", testTTSummits)
}

func TestDelete(t *testing.T) {
	t.Run("TTComments", testTTCommentsDelete)
	t.Run("TTRegions", testTTRegionsDelete)
	t.Run("TTRoutes", testTTRoutesDelete)
	t.Run("TTSummits", testTTSummitsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("TTComments", testTTCommentsQueryDeleteAll)
	t.Run("TTRegions", testTTRegionsQueryDeleteAll)
	t.Run("TTRoutes", testTTRoutesQueryDeleteAll)
	t.Run("TTSummits", testTTSummitsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("TTComments", testTTCommentsSliceDeleteAll)
	t.Run("TTRegions", testTTRegionsSliceDeleteAll)
	t.Run("TTRoutes", testTTRoutesSliceDeleteAll)
	t.Run("TTSummits", testTTSummitsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("TTComments", testTTCommentsExists)
	t.Run("TTRegions", testTTRegionsExists)
	t.Run("TTRoutes", testTTRoutesExists)
	t.Run("TTSummits", testTTSummitsExists)
}

func TestFind(t *testing.T) {
	t.Run("TTComments", testTTCommentsFind)
	t.Run("TTRegions", testTTRegionsFind)
	t.Run("TTRoutes", testTTRoutesFind)
	t.Run("TTSummits", testTTSummitsFind)
}

func TestBind(t *testing.T) {
	t.Run("TTComments", testTTCommentsBind)
	t.Run("TTRegions", testTTRegionsBind)
	t.Run("TTRoutes", testTTRoutesBind)
	t.Run("TTSummits", testTTSummitsBind)
}

func TestOne(t *testing.T) {
	t.Run("TTComments", testTTCommentsOne)
	t.Run("TTRegions", testTTRegionsOne)
	t.Run("TTRoutes", testTTRoutesOne)
	t.Run("TTSummits", testTTSummitsOne)
}

func TestAll(t *testing.T) {
	t.Run("TTComments", testTTCommentsAll)
	t.Run("TTRegions", testTTRegionsAll)
	t.Run("TTRoutes", testTTRoutesAll)
	t.Run("TTSummits", testTTSummitsAll)
}

func TestCount(t *testing.T) {
	t.Run("TTComments", testTTCommentsCount)
	t.Run("TTRegions", testTTRegionsCount)
	t.Run("TTRoutes", testTTRoutesCount)
	t.Run("TTSummits", testTTSummitsCount)
}

func TestHooks(t *testing.T) {
	t.Run("TTComments", testTTCommentsHooks)
	t.Run("TTRegions", testTTRegionsHooks)
	t.Run("TTRoutes", testTTRoutesHooks)
	t.Run("TTSummits", testTTSummitsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("TTComments", testTTCommentsInsert)
	t.Run("TTComments", testTTCommentsInsertWhitelist)
	t.Run("TTRegions", testTTRegionsInsert)
	t.Run("TTRegions", testTTRegionsInsertWhitelist)
	t.Run("TTRoutes", testTTRoutesInsert)
	t.Run("TTRoutes", testTTRoutesInsertWhitelist)
	t.Run("TTSummits", testTTSummitsInsert)
	t.Run("TTSummits", testTTSummitsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("TTComments", testTTCommentsReload)
	t.Run("TTRegions", testTTRegionsReload)
	t.Run("TTRoutes", testTTRoutesReload)
	t.Run("TTSummits", testTTSummitsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("TTComments", testTTCommentsReloadAll)
	t.Run("TTRegions", testTTRegionsReloadAll)
	t.Run("TTRoutes", testTTRoutesReloadAll)
	t.Run("TTSummits", testTTSummitsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("TTComments", testTTCommentsSelect)
	t.Run("TTRegions", testTTRegionsSelect)
	t.Run("TTRoutes", testTTRoutesSelect)
	t.Run("TTSummits", testTTSummitsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("TTComments", testTTCommentsUpdate)
	t.Run("TTRegions", testTTRegionsUpdate)
	t.Run("TTRoutes", testTTRoutesUpdate)
	t.Run("TTSummits", testTTSummitsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("TTComments", testTTCommentsSliceUpdateAll)
	t.Run("TTRegions", testTTRegionsSliceUpdateAll)
	t.Run("TTRoutes", testTTRoutesSliceUpdateAll)
	t.Run("TTSummits", testTTSummitsSliceUpdateAll)
}
