// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTTRegions(t *testing.T) {
	t.Parallel()

	query := TTRegions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTTRegionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTRegions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTRegionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TTRegions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTRegions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTRegionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TTRegionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTRegions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTRegionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TTRegionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TTRegion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TTRegionExists to return true, but got false.")
	}
}

func testTTRegionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ttRegionFound, err := FindTTRegion(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ttRegionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTTRegionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TTRegions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTTRegionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TTRegions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTTRegionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ttRegionOne := &TTRegion{}
	ttRegionTwo := &TTRegion{}
	if err = randomize.Struct(seed, ttRegionOne, ttRegionDBTypes, false, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}
	if err = randomize.Struct(seed, ttRegionTwo, ttRegionDBTypes, false, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ttRegionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ttRegionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TTRegions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTTRegionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ttRegionOne := &TTRegion{}
	ttRegionTwo := &TTRegion{}
	if err = randomize.Struct(seed, ttRegionOne, ttRegionDBTypes, false, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}
	if err = randomize.Struct(seed, ttRegionTwo, ttRegionDBTypes, false, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ttRegionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ttRegionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTRegions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ttRegionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TTRegion) error {
	*o = TTRegion{}
	return nil
}

func ttRegionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TTRegion) error {
	*o = TTRegion{}
	return nil
}

func ttRegionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TTRegion) error {
	*o = TTRegion{}
	return nil
}

func ttRegionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TTRegion) error {
	*o = TTRegion{}
	return nil
}

func ttRegionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TTRegion) error {
	*o = TTRegion{}
	return nil
}

func ttRegionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TTRegion) error {
	*o = TTRegion{}
	return nil
}

func ttRegionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TTRegion) error {
	*o = TTRegion{}
	return nil
}

func ttRegionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TTRegion) error {
	*o = TTRegion{}
	return nil
}

func ttRegionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TTRegion) error {
	*o = TTRegion{}
	return nil
}

func testTTRegionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TTRegion{}
	o := &TTRegion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ttRegionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TTRegion object: %s", err)
	}

	AddTTRegionHook(boil.BeforeInsertHook, ttRegionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ttRegionBeforeInsertHooks = []TTRegionHook{}

	AddTTRegionHook(boil.AfterInsertHook, ttRegionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ttRegionAfterInsertHooks = []TTRegionHook{}

	AddTTRegionHook(boil.AfterSelectHook, ttRegionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ttRegionAfterSelectHooks = []TTRegionHook{}

	AddTTRegionHook(boil.BeforeUpdateHook, ttRegionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ttRegionBeforeUpdateHooks = []TTRegionHook{}

	AddTTRegionHook(boil.AfterUpdateHook, ttRegionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ttRegionAfterUpdateHooks = []TTRegionHook{}

	AddTTRegionHook(boil.BeforeDeleteHook, ttRegionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ttRegionBeforeDeleteHooks = []TTRegionHook{}

	AddTTRegionHook(boil.AfterDeleteHook, ttRegionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ttRegionAfterDeleteHooks = []TTRegionHook{}

	AddTTRegionHook(boil.BeforeUpsertHook, ttRegionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ttRegionBeforeUpsertHooks = []TTRegionHook{}

	AddTTRegionHook(boil.AfterUpsertHook, ttRegionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ttRegionAfterUpsertHooks = []TTRegionHook{}
}

func testTTRegionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTRegions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTTRegionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ttRegionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TTRegions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTTRegionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTTRegionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TTRegionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTTRegionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TTRegions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ttRegionDBTypes = map[string]string{`ID`: `TEXT`, `DisplayName`: `TEXT`}
	_               = bytes.MinRead
)

func testTTRegionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ttRegionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ttRegionAllColumns) == len(ttRegionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTRegions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTTRegionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ttRegionAllColumns) == len(ttRegionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TTRegion{}
	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTRegions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ttRegionDBTypes, true, ttRegionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TTRegion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ttRegionAllColumns, ttRegionPrimaryKeyColumns) {
		fields = ttRegionAllColumns
	} else {
		fields = strmangle.SetComplement(
			ttRegionAllColumns,
			ttRegionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TTRegionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
