// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTRoute is an object representing the database table.
type TTRoute struct {
	ID               string `boil:"id" json:"id" toml:"id" yaml:"id"`
	SummitID         string `boil:"summit_id" json:"summit_id" toml:"summit_id" yaml:"summit_id"`
	DisplayName      string `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	AvgRating        int64  `boil:"avg_rating" json:"avg_rating" toml:"avg_rating" yaml:"avg_rating"`
	GuideRating      int64  `boil:"guide_rating" json:"guide_rating" toml:"guide_rating" yaml:"guide_rating"`
	GradeID          int64  `boil:"grade_id" json:"grade_id" toml:"grade_id" yaml:"grade_id"`
	SuggestedGradeID int64  `boil:"suggested_grade_id" json:"suggested_grade_id" toml:"suggested_grade_id" yaml:"suggested_grade_id"`
	RedPointGradeID  int64  `boil:"red_point_grade_id" json:"red_point_grade_id" toml:"red_point_grade_id" yaml:"red_point_grade_id"`
	JumpGrade        int64  `boil:"jump_grade" json:"jump_grade" toml:"jump_grade" yaml:"jump_grade"`

	R *ttRouteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttRouteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTRouteColumns = struct {
	ID               string
	SummitID         string
	DisplayName      string
	AvgRating        string
	GuideRating      string
	GradeID          string
	SuggestedGradeID string
	RedPointGradeID  string
	JumpGrade        string
}{
	ID:               "id",
	SummitID:         "summit_id",
	DisplayName:      "display_name",
	AvgRating:        "avg_rating",
	GuideRating:      "guide_rating",
	GradeID:          "grade_id",
	SuggestedGradeID: "suggested_grade_id",
	RedPointGradeID:  "red_point_grade_id",
	JumpGrade:        "jump_grade",
}

var TTRouteTableColumns = struct {
	ID               string
	SummitID         string
	DisplayName      string
	AvgRating        string
	GuideRating      string
	GradeID          string
	SuggestedGradeID string
	RedPointGradeID  string
	JumpGrade        string
}{
	ID:               "tt_route.id",
	SummitID:         "tt_route.summit_id",
	DisplayName:      "tt_route.display_name",
	AvgRating:        "tt_route.avg_rating",
	GuideRating:      "tt_route.guide_rating",
	GradeID:          "tt_route.grade_id",
	SuggestedGradeID: "tt_route.suggested_grade_id",
	RedPointGradeID:  "tt_route.red_point_grade_id",
	JumpGrade:        "tt_route.jump_grade",
}

// Generated where

var TTRouteWhere = struct {
	ID               whereHelperstring
	SummitID         whereHelperstring
	DisplayName      whereHelperstring
	AvgRating        whereHelperint64
	GuideRating      whereHelperint64
	GradeID          whereHelperint64
	SuggestedGradeID whereHelperint64
	RedPointGradeID  whereHelperint64
	JumpGrade        whereHelperint64
}{
	ID:               whereHelperstring{field: "\"tt_route\".\"id\""},
	SummitID:         whereHelperstring{field: "\"tt_route\".\"summit_id\""},
	DisplayName:      whereHelperstring{field: "\"tt_route\".\"display_name\""},
	AvgRating:        whereHelperint64{field: "\"tt_route\".\"avg_rating\""},
	GuideRating:      whereHelperint64{field: "\"tt_route\".\"guide_rating\""},
	GradeID:          whereHelperint64{field: "\"tt_route\".\"grade_id\""},
	SuggestedGradeID: whereHelperint64{field: "\"tt_route\".\"suggested_grade_id\""},
	RedPointGradeID:  whereHelperint64{field: "\"tt_route\".\"red_point_grade_id\""},
	JumpGrade:        whereHelperint64{field: "\"tt_route\".\"jump_grade\""},
}

// TTRouteRels is where relationship names are stored.
var TTRouteRels = struct {
}{}

// ttRouteR is where relationships are stored.
type ttRouteR struct {
}

// NewStruct creates a new relationship struct
func (*ttRouteR) NewStruct() *ttRouteR {
	return &ttRouteR{}
}

// ttRouteL is where Load methods for each relationship are stored.
type ttRouteL struct{}

var (
	ttRouteAllColumns            = []string{"id", "summit_id", "display_name", "avg_rating", "guide_rating", "grade_id", "suggested_grade_id", "red_point_grade_id", "jump_grade"}
	ttRouteColumnsWithoutDefault = []string{"id", "summit_id", "display_name", "avg_rating", "guide_rating", "grade_id", "suggested_grade_id", "red_point_grade_id", "jump_grade"}
	ttRouteColumnsWithDefault    = []string{}
	ttRoutePrimaryKeyColumns     = []string{"id"}
)

type (
	// TTRouteSlice is an alias for a slice of pointers to TTRoute.
	// This should almost always be used instead of []TTRoute.
	TTRouteSlice []*TTRoute
	// TTRouteHook is the signature for custom TTRoute hook methods
	TTRouteHook func(context.Context, boil.ContextExecutor, *TTRoute) error

	ttRouteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttRouteType                 = reflect.TypeOf(&TTRoute{})
	ttRouteMapping              = queries.MakeStructMapping(ttRouteType)
	ttRoutePrimaryKeyMapping, _ = queries.BindMapping(ttRouteType, ttRouteMapping, ttRoutePrimaryKeyColumns)
	ttRouteInsertCacheMut       sync.RWMutex
	ttRouteInsertCache          = make(map[string]insertCache)
	ttRouteUpdateCacheMut       sync.RWMutex
	ttRouteUpdateCache          = make(map[string]updateCache)
	ttRouteUpsertCacheMut       sync.RWMutex
	ttRouteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttRouteBeforeInsertHooks []TTRouteHook
var ttRouteBeforeUpdateHooks []TTRouteHook
var ttRouteBeforeDeleteHooks []TTRouteHook
var ttRouteBeforeUpsertHooks []TTRouteHook

var ttRouteAfterInsertHooks []TTRouteHook
var ttRouteAfterSelectHooks []TTRouteHook
var ttRouteAfterUpdateHooks []TTRouteHook
var ttRouteAfterDeleteHooks []TTRouteHook
var ttRouteAfterUpsertHooks []TTRouteHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTRoute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttRouteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTRoute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttRouteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTRoute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttRouteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTRoute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttRouteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTRoute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttRouteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTRoute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttRouteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTRoute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttRouteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTRoute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttRouteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTRoute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttRouteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTRouteHook registers your hook function for all future operations.
func AddTTRouteHook(hookPoint boil.HookPoint, ttRouteHook TTRouteHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ttRouteBeforeInsertHooks = append(ttRouteBeforeInsertHooks, ttRouteHook)
	case boil.BeforeUpdateHook:
		ttRouteBeforeUpdateHooks = append(ttRouteBeforeUpdateHooks, ttRouteHook)
	case boil.BeforeDeleteHook:
		ttRouteBeforeDeleteHooks = append(ttRouteBeforeDeleteHooks, ttRouteHook)
	case boil.BeforeUpsertHook:
		ttRouteBeforeUpsertHooks = append(ttRouteBeforeUpsertHooks, ttRouteHook)
	case boil.AfterInsertHook:
		ttRouteAfterInsertHooks = append(ttRouteAfterInsertHooks, ttRouteHook)
	case boil.AfterSelectHook:
		ttRouteAfterSelectHooks = append(ttRouteAfterSelectHooks, ttRouteHook)
	case boil.AfterUpdateHook:
		ttRouteAfterUpdateHooks = append(ttRouteAfterUpdateHooks, ttRouteHook)
	case boil.AfterDeleteHook:
		ttRouteAfterDeleteHooks = append(ttRouteAfterDeleteHooks, ttRouteHook)
	case boil.AfterUpsertHook:
		ttRouteAfterUpsertHooks = append(ttRouteAfterUpsertHooks, ttRouteHook)
	}
}

// One returns a single ttRoute record from the query.
func (q ttRouteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTRoute, error) {
	o := &TTRoute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tt_route")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TTRoute records from the query.
func (q ttRouteQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTRouteSlice, error) {
	var o []*TTRoute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TTRoute slice")
	}

	if len(ttRouteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TTRoute records in the query.
func (q ttRouteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tt_route rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ttRouteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tt_route exists")
	}

	return count > 0, nil
}

// TTRoutes retrieves all the records using an executor.
func TTRoutes(mods ...qm.QueryMod) ttRouteQuery {
	mods = append(mods, qm.From("\"tt_route\""))
	return ttRouteQuery{NewQuery(mods...)}
}

// FindTTRoute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTRoute(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TTRoute, error) {
	ttRouteObj := &TTRoute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tt_route\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttRouteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tt_route")
	}

	if err = ttRouteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttRouteObj, err
	}

	return ttRouteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTRoute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tt_route provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttRouteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttRouteInsertCacheMut.RLock()
	cache, cached := ttRouteInsertCache[key]
	ttRouteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttRouteAllColumns,
			ttRouteColumnsWithDefault,
			ttRouteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ttRouteType, ttRouteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttRouteType, ttRouteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tt_route\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tt_route\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tt_route")
	}

	if !cached {
		ttRouteInsertCacheMut.Lock()
		ttRouteInsertCache[key] = cache
		ttRouteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TTRoute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTRoute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttRouteUpdateCacheMut.RLock()
	cache, cached := ttRouteUpdateCache[key]
	ttRouteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttRouteAllColumns,
			ttRoutePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tt_route, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tt_route\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, ttRoutePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttRouteType, ttRouteMapping, append(wl, ttRoutePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tt_route row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tt_route")
	}

	if !cached {
		ttRouteUpdateCacheMut.Lock()
		ttRouteUpdateCache[key] = cache
		ttRouteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ttRouteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tt_route")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tt_route")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTRouteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttRoutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tt_route\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttRoutePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ttRoute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ttRoute")
	}
	return rowsAff, nil
}

// Delete deletes a single TTRoute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTRoute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TTRoute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttRoutePrimaryKeyMapping)
	sql := "DELETE FROM \"tt_route\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tt_route")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tt_route")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ttRouteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ttRouteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tt_route")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tt_route")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTRouteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttRouteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttRoutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tt_route\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttRoutePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ttRoute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tt_route")
	}

	if len(ttRouteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTRoute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTRoute(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTRouteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTRouteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttRoutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tt_route\".* FROM \"tt_route\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttRoutePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TTRouteSlice")
	}

	*o = slice

	return nil
}

// TTRouteExists checks if the TTRoute row exists.
func TTRouteExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tt_route\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tt_route exists")
	}

	return exists, nil
}
