// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTTSummits(t *testing.T) {
	t.Parallel()

	query := TTSummits()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTTSummitsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTSummits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTSummitsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TTSummits().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTSummits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTSummitsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TTSummitSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTSummits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTSummitsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TTSummitExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TTSummit exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TTSummitExists to return true, but got false.")
	}
}

func testTTSummitsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ttSummitFound, err := FindTTSummit(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ttSummitFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTTSummitsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TTSummits().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTTSummitsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TTSummits().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTTSummitsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ttSummitOne := &TTSummit{}
	ttSummitTwo := &TTSummit{}
	if err = randomize.Struct(seed, ttSummitOne, ttSummitDBTypes, false, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}
	if err = randomize.Struct(seed, ttSummitTwo, ttSummitDBTypes, false, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ttSummitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ttSummitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TTSummits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTTSummitsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ttSummitOne := &TTSummit{}
	ttSummitTwo := &TTSummit{}
	if err = randomize.Struct(seed, ttSummitOne, ttSummitDBTypes, false, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}
	if err = randomize.Struct(seed, ttSummitTwo, ttSummitDBTypes, false, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ttSummitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ttSummitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTSummits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ttSummitBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TTSummit) error {
	*o = TTSummit{}
	return nil
}

func ttSummitAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TTSummit) error {
	*o = TTSummit{}
	return nil
}

func ttSummitAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TTSummit) error {
	*o = TTSummit{}
	return nil
}

func ttSummitBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TTSummit) error {
	*o = TTSummit{}
	return nil
}

func ttSummitAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TTSummit) error {
	*o = TTSummit{}
	return nil
}

func ttSummitBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TTSummit) error {
	*o = TTSummit{}
	return nil
}

func ttSummitAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TTSummit) error {
	*o = TTSummit{}
	return nil
}

func ttSummitBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TTSummit) error {
	*o = TTSummit{}
	return nil
}

func ttSummitAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TTSummit) error {
	*o = TTSummit{}
	return nil
}

func testTTSummitsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TTSummit{}
	o := &TTSummit{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ttSummitDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TTSummit object: %s", err)
	}

	AddTTSummitHook(boil.BeforeInsertHook, ttSummitBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ttSummitBeforeInsertHooks = []TTSummitHook{}

	AddTTSummitHook(boil.AfterInsertHook, ttSummitAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ttSummitAfterInsertHooks = []TTSummitHook{}

	AddTTSummitHook(boil.AfterSelectHook, ttSummitAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ttSummitAfterSelectHooks = []TTSummitHook{}

	AddTTSummitHook(boil.BeforeUpdateHook, ttSummitBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ttSummitBeforeUpdateHooks = []TTSummitHook{}

	AddTTSummitHook(boil.AfterUpdateHook, ttSummitAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ttSummitAfterUpdateHooks = []TTSummitHook{}

	AddTTSummitHook(boil.BeforeDeleteHook, ttSummitBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ttSummitBeforeDeleteHooks = []TTSummitHook{}

	AddTTSummitHook(boil.AfterDeleteHook, ttSummitAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ttSummitAfterDeleteHooks = []TTSummitHook{}

	AddTTSummitHook(boil.BeforeUpsertHook, ttSummitBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ttSummitBeforeUpsertHooks = []TTSummitHook{}

	AddTTSummitHook(boil.AfterUpsertHook, ttSummitAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ttSummitAfterUpsertHooks = []TTSummitHook{}
}

func testTTSummitsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTSummits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTTSummitsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ttSummitColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TTSummits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTTSummitsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTTSummitsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TTSummitSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTTSummitsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TTSummits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ttSummitDBTypes = map[string]string{`ID`: `TEXT`, `GuideID`: `TEXT`, `RegionID`: `TEXT`, `DisplayName`: `TEXT`, `Lat`: `REAL`, `Long`: `REAL`}
	_               = bytes.MinRead
)

func testTTSummitsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ttSummitPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ttSummitAllColumns) == len(ttSummitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTSummits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTTSummitsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ttSummitAllColumns) == len(ttSummitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TTSummit{}
	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTSummits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ttSummitDBTypes, true, ttSummitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TTSummit struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ttSummitAllColumns, ttSummitPrimaryKeyColumns) {
		fields = ttSummitAllColumns
	} else {
		fields = strmangle.SetComplement(
			ttSummitAllColumns,
			ttSummitPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TTSummitSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
