// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTTComments(t *testing.T) {
	t.Parallel()

	query := TTComments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTTCommentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTCommentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TTComments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTCommentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TTCommentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTCommentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TTCommentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TTComment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TTCommentExists to return true, but got false.")
	}
}

func testTTCommentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ttCommentFound, err := FindTTComment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ttCommentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTTCommentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TTComments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTTCommentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TTComments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTTCommentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ttCommentOne := &TTComment{}
	ttCommentTwo := &TTComment{}
	if err = randomize.Struct(seed, ttCommentOne, ttCommentDBTypes, false, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}
	if err = randomize.Struct(seed, ttCommentTwo, ttCommentDBTypes, false, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ttCommentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ttCommentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TTComments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTTCommentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ttCommentOne := &TTComment{}
	ttCommentTwo := &TTComment{}
	if err = randomize.Struct(seed, ttCommentOne, ttCommentDBTypes, false, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}
	if err = randomize.Struct(seed, ttCommentTwo, ttCommentDBTypes, false, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ttCommentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ttCommentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ttCommentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TTComment) error {
	*o = TTComment{}
	return nil
}

func ttCommentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TTComment) error {
	*o = TTComment{}
	return nil
}

func ttCommentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TTComment) error {
	*o = TTComment{}
	return nil
}

func ttCommentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TTComment) error {
	*o = TTComment{}
	return nil
}

func ttCommentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TTComment) error {
	*o = TTComment{}
	return nil
}

func ttCommentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TTComment) error {
	*o = TTComment{}
	return nil
}

func ttCommentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TTComment) error {
	*o = TTComment{}
	return nil
}

func ttCommentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TTComment) error {
	*o = TTComment{}
	return nil
}

func ttCommentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TTComment) error {
	*o = TTComment{}
	return nil
}

func testTTCommentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TTComment{}
	o := &TTComment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ttCommentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TTComment object: %s", err)
	}

	AddTTCommentHook(boil.BeforeInsertHook, ttCommentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ttCommentBeforeInsertHooks = []TTCommentHook{}

	AddTTCommentHook(boil.AfterInsertHook, ttCommentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ttCommentAfterInsertHooks = []TTCommentHook{}

	AddTTCommentHook(boil.AfterSelectHook, ttCommentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ttCommentAfterSelectHooks = []TTCommentHook{}

	AddTTCommentHook(boil.BeforeUpdateHook, ttCommentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ttCommentBeforeUpdateHooks = []TTCommentHook{}

	AddTTCommentHook(boil.AfterUpdateHook, ttCommentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ttCommentAfterUpdateHooks = []TTCommentHook{}

	AddTTCommentHook(boil.BeforeDeleteHook, ttCommentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ttCommentBeforeDeleteHooks = []TTCommentHook{}

	AddTTCommentHook(boil.AfterDeleteHook, ttCommentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ttCommentAfterDeleteHooks = []TTCommentHook{}

	AddTTCommentHook(boil.BeforeUpsertHook, ttCommentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ttCommentBeforeUpsertHooks = []TTCommentHook{}

	AddTTCommentHook(boil.AfterUpsertHook, ttCommentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ttCommentAfterUpsertHooks = []TTCommentHook{}
}

func testTTCommentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTTCommentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ttCommentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TTComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTTCommentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTTCommentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TTCommentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTTCommentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TTComments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ttCommentDBTypes = map[string]string{`ID`: `TEXT`, `Author`: `TEXT`, `CreatedTime`: `TEXT`, `AuthenticatedAuthor`: `INTEGER`, `Text`: `TEXT`, `Rating`: `INTEGER`}
	_                = bytes.MinRead
)

func testTTCommentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ttCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ttCommentAllColumns) == len(ttCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTTCommentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ttCommentAllColumns) == len(ttCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TTComment{}
	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ttCommentDBTypes, true, ttCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TTComment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ttCommentAllColumns, ttCommentPrimaryKeyColumns) {
		fields = ttCommentAllColumns
	} else {
		fields = strmangle.SetComplement(
			ttCommentAllColumns,
			ttCommentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TTCommentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
